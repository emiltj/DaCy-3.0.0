title: "Train spaCy transformer for Danish"
description: >
    This project template lets you train a part-of-speech tagger, morphologizer,
    dependency parser and named entity recognition using any combination of DANSK, DaNE and the English Ontonotes v5 corpora. 
    It takes care of downloading the corpora, merging the datasets in any combination needed, and trains and evaluates the model. 
    The template uses one of more of the transformer models, downloaded via Huggingface: 
      - "jonfd/electra-small-nordic"
      - "NbAiLab/nb-roberta-base-scandi", 
      - "KennethEnevoldsen/dfm-bert-large-v1-2048bsz-1Msteps", 
      #- "xlm-roberta-large", 

    You can run from yaml file using
    spacy project run WORKFLOW/COMMAND


# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  lang: "da"
  dataset: "dane_dansk"
  no_dev_test: 0
  dansk_upscale: 1
  config: "config"
  package_name_small: "dacy_small_trf"
  package_name_medium: "dacy_medium_trf"
  package_name_large: "dacy_large_trf"
  package_version: "0.1.0"
  gpu_id: 0
  virtual_env: "training"
  #spacy_version: ">=3.1.0"
  #organization: "chcaa"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "data", "training", "metrics", "packages"]

assets:
  - dest: "assets/" 

workflows:
  setup:
    - ucloud_setup
    - install_deps
    - dansk_upscale
    - merge_datasets

  small:
    - train_dacy_small
    - evaluate_small
    - package_small
    - publish_small

  medium:
    - train_dacy_medium
    - evaluate_medium
    - package_medium
    - publish_medium

  large:
    - train_dacy_large
    - evaluate_large
    - package_large
    - publish_large


commands:
  - name: ucloud_setup
    help: "Sets up ucloud for training with cuda"
    script: 
      - "bash src/server_dependencies.sh"
    deps:
      - "src/server_dependencies.sh"

  - name: install_deps
    help: "Install dependencies in new venv, log in to Weights & Biases and to Huggingface"
    script:
      #- "conda deactivate"
      - "python3 -m venv ${vars.virtual_env}"
      - "source ${vars.virtual_env}/bin/activate"
      - "pip install -r requirements.txt"
      - "wandb login"
      - "huggingface-cli login"
    deps:
      - "requirements.txt"

  - name: set_values_as_missing_values
    help: "Removes NER from DaNE and Tagger, Parser and Lemmas from DANSK"
    script:
      - "python src/set_values_as_missing.py ${vars.dataset}"
    outputs:
      - "data/dansk_train.spacy"
      - "data/dansk_dev.spacy"
      - "data/dansk_test.spacy"
      - "data/dansk.spacy"
      - "data/ontonotes.spacy"
      - "data/dane_train.spacy"
      - "data/dane_dev.spacy"
      - "data/dane_test.spacy"
      - "data/dane.spacy"
    deps:
      - "assets/dansk_train.spacy"
      - "assets/dansk_dev.spacy"
      - "assets/dansk_test.spacy"
      - "assets/dansk.spacy"
      - "assets/ontonotes.spacy"
      - "assets/dane_train.spacy"
      - "assets/dane_dev.spacy"
      - "assets/dane_test.spacy"
      - "assets/dane.spacy"

  - name: dansk_upscale
    help: "Upscale DANSK to match the size of ontonotes"
    script:
      - "python src/dansk_upscaling.py ${vars.dansk_upscale}"
    deps:
      - "data/dansk_train.spacy"
      - "data/ontonotes.spacy"

  - name: merge_datasets
    help: "Merge datasets in required combination"
    script:
      - "python src/merge_datasets.py ${vars.dataset}, ${vars.no_dev_test}"
    deps:
      - "src/merge_datasets.py"
    outputs:
      - "data/train.spacy"
      - "data/dev.spacy"
      - "data/test.spacy"

  - name: train_dacy_small
    help: "Train on dataset: ${vars.dataset} using config: configs/${vars.config}_small.cfg"
    script:
      - "mkdir -p training/small"
      - "python -m spacy train configs/${vars.config}_small.cfg --output training/small/${vars.dataset} --gpu-id ${vars.gpu_id} --paths.train data/train.spacy --paths.dev data/dev.spacy --nlp.lang=${vars.lang}"
    deps:
      - "data/train.spacy"
      - "data/dev.spacy"
      - "configs/${vars.config}_small.cfg"
    outputs:
      - "training/small/${vars.dataset}/model-last"

  - name: train_dacy_medium
    help: "Train on dataset: ${vars.dataset} using config: configs/${vars.config}_medium.cfg"
    script:
      - "mkdir -p training/medium"
      - "python -m spacy train configs/${vars.config}_medium.cfg --output training/medium/${vars.dataset} --gpu-id ${vars.gpu_id} --paths.train data/train.spacy --paths.dev data/dev.spacy --nlp.lang=${vars.lang}"
    deps:
      - "data/train.spacy"
      - "data/dev.spacy"
      - "configs/${vars.config}_medium.cfg"
    outputs:
      - "training/medium/${vars.dataset}/model-last"

  - name: train_dacy_large
    help: "Train on dataset: ${vars.dataset} using config: configs/${vars.config}_large.cfg"
    script:
      - "mkdir -p training/large"
      - "python -m spacy train configs/${vars.config}_large.cfg --output training/large/${vars.dataset} --gpu-id ${vars.gpu_id} --paths.train data/train.spacy --paths.dev data/dev.spacy --nlp.lang=${vars.lang}"
    deps:
      - "data/train.spacy"
      - "data/dev.spacy"
      - "configs/${vars.config}_large.cfg"
    outputs:
      - "training/large/${vars.dataset}/model-last"

  - name: evaluate_small
    help: "Evaluate the small model on the test.spacy and save the metrics"
    script:
      - "python -m spacy evaluate ./training/small/${vars.dataset}/model-last data/test.spacy --output ./metrics/${vars.dataset}_last_${vars.package_name_small}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
      - "python -m spacy evaluate ./training/small/${vars.dataset}/model-best data/test.spacy --output ./metrics/${vars.dataset}_best_${vars.package_name_small}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
    deps:
      - "training/small/${vars.dataset}/model-last"
      - "training/small/${vars.dataset}/model-best"
      - "data/test.spacy"
    outputs:
      - "metrics/${vars.dataset}_best_${vars.package_name_small}-${vars.package_version}.json"
      - "metrics/${vars.dataset}_last_${vars.package_name_small}-${vars.package_version}.json"

  - name: evaluate_medium
    help: "Evaluate the medium model on the test.spacy and save the metrics"
    script:
      - "python -m spacy evaluate ./training/medium/${vars.dataset}/model-last data/test.spacy --output ./metrics/${vars.dataset}_last_${vars.package_name_medium}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
      - "python -m spacy evaluate ./training/medium/${vars.dataset}/model-best data/test.spacy --output ./metrics/${vars.dataset}_best_${vars.package_name_medium}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
    deps:
      - "training/medium/${vars.dataset}/model-last"
      - "training/medium/${vars.dataset}/model-best"
      - "data/test.spacy"
    outputs:
      - "metrics/${vars.dataset}_best_${vars.package_name_medium}-${vars.package_version}.json"
      - "metrics/${vars.dataset}_last_${vars.package_name_medium}-${vars.package_version}.json"

  - name: evaluate_large
    help: "Evaluate the large model on the test.spacy and save the metrics"
    script:
      - "python -m spacy evaluate ./training/large/${vars.dataset}/model-last data/test.spacy --output ./metrics/${vars.dataset}_last_${vars.package_name_large}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
      - "python -m spacy evaluate ./training/large/${vars.dataset}/model-best data/test.spacy --output ./metrics/${vars.dataset}_best_${vars.package_name_large}-${vars.package_version}.json --gpu-id ${vars.gpu_id}"
    deps:
      - "training/large/${vars.dataset}/model-last"
      - "training/large/${vars.dataset}/model-best"
      - "data/test.spacy"
    outputs:
      - "metrics/${vars.dataset}_best_${vars.package_name_large}-${vars.package_version}.json"
      - "metrics/${vars.dataset}_last_${vars.package_name_large}-${vars.package_version}.json"

  - name: package_small
    help: "Package the small trained model so it can be installed"
    script:
      - "python -m spacy package training/small/${vars.dataset}/model-best packages --name ${vars.package_name_small} --version ${vars.package_version} --build wheel --force"
      - "python src/update_meta_json_name.py ${vars.dataset} ${vars.package_version} small packages/da_dacy_small_trf-${vars.package_version}/meta.json ${vars.no_dev_test}"
    deps:
      - "training/small/${vars.dataset}/model-best"
    outputs:
      - "packages/???"

  - name: package_medium
    help: "Package the medium trained model so it can be installed"
    script:
      - "python -m spacy package training/medium/${vars.dataset}/model-best packages --name ${vars.package_name_medium} --version ${vars.package_version} --build wheel --force"
      - "python src/update_meta_json_name.py ${vars.dataset} ${vars.package_version} medium packages/da_dacy_medium_trf-${vars.package_version}/meta.json ${vars.no_dev_test}"
    deps:
      - "training/medium/${vars.dataset}/model-best"
    outputs:
      - "packages/???"

  - name: package_large
    help: "Package the large trained model so it can be installed"
    script:
      - "python -m spacy package training/large/${vars.dataset}/model-best packages --name ${vars.package_name_large} --version ${vars.package_version} --build wheel --force"
      - "python src/update_meta_json_name.py ${vars.dataset} ${vars.package_version} large packages/da_dacy_large_trf-${vars.package_version}/meta.json ${vars.no_dev_test}"
    deps:
      - "training/large/${vars.dataset}/model-best"
    outputs:
      - "packages/???"

  - name: publish_small
    help: "Publish small package to huggingface model hub."
    script:
      - "python -m spacy huggingface-hub push packages/${vars.lang}_${vars.package_name_small}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_small}-${vars.package_version}-py3-none-any.whl"  #-o '${vars.organization}' -m 'update dacy pipeline'
    deps:
      - "packages/${vars.lang}_${vars.package_name_small}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_small}-${vars.package_version}-py3-none-any.whl"

  - name: publish_medium
    help: "Publish medium package to huggingface model hub."
    script:
      - "python -m spacy huggingface-hub push packages/${vars.lang}_${vars.package_name_medium}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_medium}-${vars.package_version}-py3-none-any.whl" #-o '${vars.organization}' -m 'update dacy pipeline'
    deps:
      - "packages/${vars.lang}_${vars.package_name_medium}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_medium}-${vars.package_version}-py3-none-any.whl"

  - name: publish_large
    help: "Publish large package to huggingface model hub."
    script:
      - "python -m spacy huggingface-hub push packages/${vars.lang}_${vars.package_name_large}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_large}-${vars.package_version}-py3-none-any.whl" #-o '${vars.organization}' -m 'update dacy pipeline'
    deps:
      - "packages/${vars.lang}_${vars.package_name_large}-${vars.package_version}/dist/${vars.lang}_${vars.package_name_large}-${vars.package_version}-py3-none-any.whl"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf training/*"
      - "rm -rf metrics/*"
      - "rm -rf data/*"